     Js Execution Context

     {} ---- Global Ec  (Execution Context)
                     this value object in window
   1st Global Execution Context
   2nd Functional Execution Context
   3rd not imp Eval Execution Context


   {}  two phases me run hota hai

   1st memory Creation phases
   only memory alocation hoyta hai

   2nd. Execution phase    


   ++++++++++ for example
   let val1 = 10;              
   let val2 = 20;

   function addNumber(num1,numm2){
     let total = num1 + num2;
     return total;
   }       
   let result1 = addNumber(val1 , val2);
   let result2 = addNumber(23,78)     


   1st step - Global Execution
                    !
                    this ---- compulsory step for all



    2nd step - memory phases   only memmory allocate
        val1 -- undefined                
        val2 -- undefined                
        addNumber -- defination           
        result1 -- undefined                
        result2 -- undefined  

    3rd step - Execution step
            val1 --10  value assign hoti hai
            val2 -- 29   
            addNumber --- ke liye ek alag Execution context bnata hai
                          phir usme ek new variable environmemt + Execution thread bnta hai

                than addNumber ke liye phir 2 step  foolow hogi memory phase and Execution phase                            
                 memmory phase                            Execution phase
                 val1 = undefined                         num1 = 10
                 val2 = undefined                         num2 = 20
                 total = undefined                        total = 30

                 than jo new variable environmemt create hua tha vo ab above process ke baad delete bhi hoga and hum revert back ho jayenge Execution phase me


       ---------------------------------------------------
       3rd phase aage ka 
       result1 = 15
       result2 ke liye phirse process hogi uper ki  for every repeat hogi

 -------------------------------------------------------------------------------------------------------    


     2nd concept call stack 
     follow the LIFO concept Last In First Out   



practically check on the browser where i go on snippet and make fiel 
save the code and run and check on the call stack how it work

-------------------------------------------------------------------------

   NORMAL CHECKING

     function one() {
    console.log("hey")

    
}
function two() {
    console.log("sagar")

    
}
function three() {
    console.log("rahangdale")
}

one();
two();
three(); 

---------------------------------------------------------------------

FUNCTION UNDER NEW ONE INTRODUCE FOR EX TWO

function one() {
    console.log("hey")
two();
    
}
function two() {
    console.log("sagar")
three();
    
}
function three() {
    console.log("rahangdale")
}

one();
two();
three();